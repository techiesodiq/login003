{"version":3,"sources":["avatar.svg","bg.svg","wave.png","components/FontawesomeIcons/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","library","add","faUser","faLock","App","className","src","bgWave","alt","bgPhone","action","userAvatar","icon","type","placeholder","href","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,4KCG3CC,IAAQC,IAAIC,IAAQC,K,oECqDLC,MA/Cf,WACC,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,iBAAiBC,IAAKC,IAAQC,IAAI,KACjD,yBAAKH,UAAU,aACd,yBAAKA,UAAU,cACd,yBAAKC,IAAKG,IAASD,IAAI,MAExB,yBAAKH,UAAU,kBACd,0BAAMK,OAAO,cACZ,yBAAKL,UAAU,SAASC,IAAKK,IAAYH,IAAI,KAC7C,uCACA,yBAAKH,UAAU,iBACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,eACf,kBAAC,IAAD,CAAiBO,KAAMV,IAAQG,UAAU,eAG3C,6BACC,wCACA,2BAAOA,UAAU,QAAQQ,KAAK,OAAOC,YAAY,eAGnD,yBAAKT,UAAU,iBACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,eACf,kBAAC,IAAD,CAAiBO,KAAMT,IAAQE,UAAU,eAG3C,6BACC,wCACA,2BACCA,UAAU,QACVQ,KAAK,WACLC,YAAY,eAIf,uBAAGC,KAAK,gBAAR,mBACA,2BAAOF,KAAK,SAASR,UAAU,MAAMW,MAAM,eCpC7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f37f02d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.f620e5fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.374a04af.svg\";","module.exports = __webpack_public_path__ + \"static/media/wave.6d252a00.png\";","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons'\r\n \r\nlibrary.add(faUser, faLock)","import React from \"react\";\nimport \"./components/FontawesomeIcons\";\nimport userAvatar from \"./avatar.svg\";\nimport bgPhone from \"./bg.svg\";\nimport bgWave from \"./wave.png\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faLock } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<img className=\"backgroundWave\" src={bgWave} alt=\"\" />\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"bgPhoneImg\">\n\t\t\t\t\t<img src={bgPhone} alt=\"\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"loginContainer\">\n\t\t\t\t\t<form action=\"index.html\">\n\t\t\t\t\t\t<img className=\"avatar\" src={userAvatar} alt=\"\" />\n\t\t\t\t\t\t<h2>Welcome</h2>\n\t\t\t\t\t\t<div className=\"input-div one\">\n\t\t\t\t\t\t\t<div className=\"fontAwesome\">\n\t\t\t\t\t\t\t\t<span className=\"awesomeFont\">\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUser} className=\"userIcon\" />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h5>Username</h5>\n\t\t\t\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Username\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"input-div two\">\n\t\t\t\t\t\t\t<div className=\"fontAwesome\">\n\t\t\t\t\t\t\t\t<span className=\"awesomeFont\">\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faLock} className=\"lockIcon\" />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h5>Password</h5>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<a href=\"//#endregion\">Forget Password</a>\n\t\t\t\t\t\t<input type=\"submit\" className=\"btn\" value=\"Login\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}